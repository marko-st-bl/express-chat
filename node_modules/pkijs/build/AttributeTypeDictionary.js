"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

//**************************************************************************************
const defaultValues = new Map([["2.5.4.15", "businessCategory"], ["2.5.4.6", "C"], ["2.5.4.3", "CN"], ["0.9.2342.19200300.100.1.25", "DC"], ["2.5.4.13", "description"], ["2.5.4.27", "destinationIndicator"], ["2.5.4.49", "distinguishedName"], ["2.5.4.46", "dnQualifier"], ["2.5.4.47", "enhancedSearchGuide"], ["2.5.4.23", "facsimileTelephoneNumber"], ["2.5.4.44", "generationQualifier"], ["2.5.4.42", "givenName"], ["2.5.4.51", "houseIdentifier"], ["2.5.4.43", "initials"], ["2.5.4.25", "internationalISDNNumber"], ["2.5.4.7", "L"], ["2.5.4.31", "member"], ["2.5.4.41", "name"], ["2.5.4.10", "O"], ["2.5.4.11", "OU"], ["2.5.4.32", "owner"], ["2.5.4.19", "physicalDeliveryOfficeName"], ["2.5.4.16", "postalAddress"], ["2.5.4.17", "postalCode"], ["2.5.4.18", "postOfficeBox"], ["2.5.4.28", "preferredDeliveryMethod"], ["2.5.4.26", "registeredAddress"], ["2.5.4.33", "roleOccupant"], ["2.5.4.14", "searchGuide"], ["2.5.4.34", "seeAlso"], ["2.5.4.5", "serialNumber"], ["2.5.4.4", "SN"], ["2.5.4.8", "ST"], ["2.5.4.9", "street"], ["2.5.4.20", "telephoneNumber"], ["2.5.4.22", "teletexTerminalIdentifier"], ["2.5.4.21", "telexNumber"], ["2.5.4.12", "title"], ["0.9.2342.19200300.100.1.1", "UID"], ["2.5.4.50", "uniqueMember"], ["2.5.4.35", "userPassword"], ["2.5.4.24", "x121Address"], ["2.5.4.45", "x500UniqueIdentifier"], ["2.5.6.11", "applicationProcess"], ["2.5.6.2", "country"], ["1.3.6.1.4.1.1466.344", "dcObject"], ["2.5.6.14", "device"], ["2.5.6.9", "groupOfNames"], ["2.5.6.17", "groupOfUniqueNames"], ["2.5.6.3", "locality"], ["2.5.6.4", "organization"], ["2.5.6.7", "organizationalPerson"], ["2.5.6.8", "organizationalRole"], ["2.5.6.5", "organizationalUnit"], ["2.5.6.6", "person"], ["2.5.6.10", "residentialPerson"], ["1.3.6.1.1.3.1", "uidObject"]]);
/**
 * Map from RFC4519. Extract of AttributeType names with their corresponding OIDs.
 */

class AttributeTypeDictionary {
  /**
   * Gets the Attribute Type Name corresponding to an OID
   * @param {string} oid 
   * @returns {string} - Returns the Attribute Type name if found, else the OID itself
   */
  static get(oid) {
    if (!defaultValues.has(oid)) {
      return oid;
    }

    return defaultValues.get(oid);
  }
  /**
   * Allows to find an Atribute Type OID by its name
   * @param {string} value - Attribute Type name
   * @returns {(string|null)} Returns the Attribute Type OID or null if not found
   */


  static getOID(value) {
    var _iterator = _createForOfIteratorHelper(defaultValues),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        const _step$value = _slicedToArray(_step.value, 2),
              oid = _step$value[0],
              val = _step$value[1];

        if (val === value) {
          return oid;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return null;
  }
  /**
   * Sets a new Attribute Type OID/Name pair
   * @param {string} oid - OID to set 
   * @param {string} value - Name
   */


  static set(oid, value) {
    defaultValues.set(oid, value);
  }
  /**
   * 
   * Register multiple Attribute Type OID/Name entries
   * @param {Array<Array<string>>} entries - Array of entries that contains the [OID, name] pair
   */


  static register(entries) {
    var _iterator2 = _createForOfIteratorHelper(entries),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        const _step2$value = _slicedToArray(_step2.value, 2),
              oid = _step2$value[0],
              value = _step2$value[1];

        AttributeTypeDictionary.set(oid, value);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }

}

exports.default = AttributeTypeDictionary;
//# sourceMappingURL=AttributeTypeDictionary.js.map