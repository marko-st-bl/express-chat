{"version":3,"sources":["../src/DistinguishedName.js"],"names":["DistinguishedName","constructor","parameters","relativeDistinguishedNames","defaultValues","valueBeforeDecode","fromSchema","schema","memberName","ArrayBuffer","Error","compareWithDefault","memberValue","length","byteLength","names","asn1js","Sequence","name","blockName","value","Repeated","repeatedSequence","RelativeDistinguishedNames","rDNSequence","asn1","compareSchema","verified","result","Array","from","RDNSequence","element","DN","toSchema","fromBER","toJSON","isEqual","compareTo","entries","index","relativeDistinguishedName","toString","map","rdn","join","typesAndValues","push"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;AACA;AACA;AACe,MAAMA,iBAAN,CACf;AACC;;AACA;AACD;AACA;AACA;AACA;AACCC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EACX;AACC;;AACA;AACF;AACA;AACA;AACE,SAAKC,0BAAL,GAAkC,iCAAmBD,UAAnB,EAA+B,4BAA/B,EAA6DF,iBAAiB,CAACI,aAAlB,CAAgC,4BAAhC,CAA7D,CAAlC;AACA;AACF;AACA;AACA;;AACE,SAAKC,iBAAL,GAAyB,iCAAmBH,UAAnB,EAA+B,mBAA/B,EAAoDF,iBAAiB,CAACI,aAAlB,CAAgC,mBAAhC,CAApD,CAAzB,CAXD,CAYC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKI,UAAL,CAAgBJ,UAAU,CAACK,MAA3B,EAhBF,CAiBC;AAEA,GA3BF,CA4BC;;AACA;AACD;AACA;AACA;;;AACqB,SAAbH,aAAa,CAACI,UAAD,EACpB;AACC,YAAQA,UAAR;AAEC,WAAK,4BAAL;AACC,eAAO,EAAP;;AACD,WAAK,mBAAL;AACC,eAAO,IAAIC,WAAJ,CAAgB,CAAhB,CAAP;;AACD;AACC,cAAM,IAAIC,KAAJ,CAAW,oDAAmDF,UAAW,EAAzE,CAAN;AAPF;AASA,GA5CF,CA6CC;;AACA;AACD;AACA;AACA;AACA;;;AAC0B,SAAlBG,kBAAkB,CAACH,UAAD,EAAaI,WAAb,EACzB;AACC,YAAQJ,UAAR;AAEC,WAAK,4BAAL;AACC,eAAQI,WAAW,CAACC,MAAZ,KAAuB,CAA/B;;AACD,WAAK,mBAAL;AACC,eAAQD,WAAW,CAACE,UAAZ,KAA2B,CAAnC;;AACD;AACC,cAAM,IAAIJ,KAAJ,CAAW,oDAAmDF,UAAW,EAAzE,CAAN;AAPF;AASA,GA9DF,CA+DC;;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACc,SAAND,MAAM,CAACL,UAAU,GAAG,EAAd,EACb;AACC;AACF;AACA;AACA;AACA;AACA;AACE,UAAMa,KAAK,GAAG,iCAAmBb,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;AAEA,WAAQ,IAAIc,MAAM,CAACC,QAAX,CAAoB;AAC3BC,MAAAA,IAAI,EAAGH,KAAK,CAACI,SAAN,IAAmB,EADC;AAE3BC,MAAAA,KAAK,EAAE,CACN,IAAIJ,MAAM,CAACK,QAAX,CAAoB;AACnBH,QAAAA,IAAI,EAAGH,KAAK,CAACO,gBAAN,IAA0B,EADd;AAEnBF,QAAAA,KAAK,EAAEG,oCAA2BhB,MAA3B,CAAkCQ,KAAK,CAACS,WAAxC;AAFY,OAApB,CADM;AAFoB,KAApB,CAAR;AASA,GA9FF,CA+FC;;AACA;AACD;AACA;AACA;;;AACClB,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACA,6BAAWA,MAAX,EAAmB,CAClB,IADkB,EAElB,aAFkB,CAAnB,EAFD,CAMC;AAEA;;AACA,UAAMkB,IAAI,GAAGT,MAAM,CAACU,aAAP,CAAqBnB,MAArB,EACZA,MADY,EAEZP,iBAAiB,CAACO,MAAlB,CAAyB;AACxBQ,MAAAA,KAAK,EAAE;AACNI,QAAAA,SAAS,EAAE,IADL;AAENG,QAAAA,gBAAgB,EAAE;AAFZ;AADiB,KAAzB,CAFY,CAAb;AAUA,QAAGG,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIjB,KAAJ,CAAU,4EAAV,CAAN,CApBF,CAqBC;AAEA;;AACA,QAAG,iBAAiBe,IAAI,CAACG,MAAzB,EAAiC;AAChC,WAAKzB,0BAAL,GAAkC0B,KAAK,CAACC,IAAN,CAAWL,IAAI,CAACG,MAAL,CAAYG,WAAvB,EAAoCC,OAAO,IAAI,IAAIT,mCAAJ,CAA+B;AAAEhB,QAAAA,MAAM,EAAEyB;AAAV,OAA/B,CAA/C,CAAlC,CAzBF,CA2BC;;AACA,SAAK3B,iBAAL,GAAyBoB,IAAI,CAACG,MAAL,CAAYK,EAAZ,CAAe5B,iBAAxC,CA5BD,CA6BC;AACA,GAnIF,CAoIC;;AACA;AACD;AACA;AACA;;;AACC6B,EAAAA,QAAQ,GACR;AACC;AACA,QAAG,KAAK7B,iBAAL,CAAuBS,UAAvB,KAAsC,CAAzC,EAA4C;AAC5C;AACC,eAAQ,IAAIE,MAAM,CAACC,QAAX,CAAoB;AAC3BG,UAAAA,KAAK,EAAES,KAAK,CAACC,IAAN,CAAW,KAAK3B,0BAAhB,EAA4C6B,OAAO,IAAIA,OAAO,CAACE,QAAR,EAAvD;AADoB,SAApB,CAAR;AAGA;;AAED,UAAMT,IAAI,GAAGT,MAAM,CAACmB,OAAP,CAAe,KAAK9B,iBAApB,CAAb,CATD,CAUC;AAEA;;AACA,WAAOoB,IAAI,CAACG,MAAZ,CAbD,CAcC;AACA,GAzJF,CA0JC;;AACA;AACD;AACA;AACA;;;AACCQ,EAAAA,MAAM,GACN;AACC,WAAO;AACNjC,MAAAA,0BAA0B,EAAE0B,KAAK,CAACC,IAAN,CAAW,KAAK3B,0BAAhB,EAA4C6B,OAAO,IAAIA,OAAO,CAACI,MAAR,EAAvD;AADtB,KAAP;AAGA,GApKF,CAqKC;;AACA;AACD;AACA;AACA;AACA;;;AACCC,EAAAA,OAAO,CAACC,SAAD,EACP;AACC,QAAGA,SAAS,YAAYtC,iBAAxB,EACA;AACC,UAAG,KAAKG,0BAAL,CAAgCU,MAAhC,KAA2CyB,SAAS,CAACnC,0BAAV,CAAqCU,MAAnF,EACC,OAAO,KAAP;;AAFF,iDAIiD,KAAKV,0BAAL,CAAgCoC,OAAhC,EAJjD;AAAA;;AAAA;AAIC,4DACA;AAAA;AAAA,gBADWC,KACX;AAAA,gBADkBC,yBAClB;;AACC,cAAGA,yBAAyB,CAACJ,OAA1B,CAAkCC,SAAS,CAACnC,0BAAV,CAAqCqC,KAArC,CAAlC,MAAmF,KAAtF,EACC,OAAO,KAAP;AACD;AARF;AAAA;AAAA;AAAA;AAAA;;AAUC,aAAO,IAAP;AACA;;AAED,QAAGF,SAAS,YAAY7B,WAAxB,EACC,OAAO,4BAAc,KAAKJ,iBAAnB,EAAsCiC,SAAtC,CAAP;AAED,WAAO,KAAP;AACA,GA/LF,CAgMC;;AACA;AACD;AACA;AACA;;;AACCI,EAAAA,QAAQ,GACR;AACC,WAAO,KAAKvC,0BAAL,CAAgCwC,GAAhC,CAAoCC,GAAG,IAAIA,GAAG,CAACF,QAAJ,EAA3C,EAA2DG,IAA3D,CAAgE,GAAhE,CAAP;AACA,GAxMF,CAyMC;;AAEA;AACD;AACA;AACA;;;AACmB,MAAdC,cAAc,GAClB;AACC,QAAG,KAAK3C,0BAAL,CAAgCU,MAAhC,KAA2C,CAA9C,EACA;AACC,WAAKV,0BAAL,CAAgC4C,IAAhC,CAAqC,IAAIxB,mCAAJ,EAArC;AACA;;AACD,WAAO,KAAKpB,0BAAL,CAAgC,CAAhC,CAAP;AACA;AAED;AACD;AACA;AACA;;;AACmB,MAAd2C,cAAc,CAAC1B,KAAD,EAClB;AACC,QAAG,KAAKjB,0BAAL,CAAgCU,MAAhC,KAA2C,CAA9C,EACA;AACC,WAAKV,0BAAL,CAAgC4C,IAAhC,CAAqC,IAAIxB,mCAAJ,EAArC;AACA;;AACD,SAAKpB,0BAAL,CAAgC,CAAhC,IAAqCiB,KAArC;AACA;;AAnOF,C,CAqOA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames\";\r\n\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class DistinguishedName \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for DistinguishedName class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {}) \r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<RelativeDistinguishedNames>}\r\n\t\t * @desc Array of \"Relative Distinguished Names\" objects\r\n\t\t */\r\n\t\tthis.relativeDistinguishedNames = getParametersValue(parameters, \"relativeDistinguishedNames\", DistinguishedName.defaultValues(\"relativeDistinguishedNames\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc Value of the DN before decoding from schema\r\n\t\t */\r\n\t\tthis.valueBeforeDecode = getParametersValue(parameters, \"valueBeforeDecode\", DistinguishedName.defaultValues(\"valueBeforeDecode\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName) \r\n\t{\r\n\t\tswitch (memberName) \r\n\t\t{\r\n\t\t\tcase \"relativeDistinguishedNames\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"valueBeforeDecode\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for DistinguishedName class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue) \r\n\t{\r\n\t\tswitch (memberName) \r\n\t\t{\r\n\t\t\tcase \"relativeDistinguishedNames\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"valueBeforeDecode\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for DistinguishedName class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RDNSequence ::= Sequence OF RelativeDistinguishedName\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {}) \r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName] Name for entire block\r\n\t\t * @property {string} [repeatedSequence] Name for \"repeatedSequence\" block\r\n\t\t * @property {string} [rDNSequences] Name for \"rDNSequences\" block\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.repeatedSequence || \"\"),\r\n\t\t\t\t\tvalue: RelativeDistinguishedNames.schema(names.rDNSequence),\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema) \r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"DN\",\r\n\t\t\t\"RDNSequence\"\r\n\t\t]);\r\n\t\t//endregion\r\n\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tDistinguishedName.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"DN\",\r\n\t\t\t\t\trepeatedSequence: \"RDNSequence\",\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for DistinguishedNames\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"RDNSequence\" in asn1.result) // Could be a case when there is no \"types and values\"\r\n\t\t\tthis.relativeDistinguishedNames = Array.from(asn1.result.RDNSequence, element => new RelativeDistinguishedNames({ schema: element }));\r\n\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.valueBeforeDecode = asn1.result.DN.valueBeforeDecode;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema() \r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tif(this.valueBeforeDecode.byteLength === 0) // No stored encoded array, create \"from scratch\"\r\n\t\t{\r\n\t\t\treturn (new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.relativeDistinguishedNames, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tconst asn1 = asn1js.fromBER(this.valueBeforeDecode);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn asn1.result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON() \r\n\t{\r\n\t\treturn {\r\n\t\t\trelativeDistinguishedNames: Array.from(this.relativeDistinguishedNames, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare two RDN values, or RDN with ArrayBuffer value\r\n\t * @param {(RelativeDistinguishedNames|ArrayBuffer)} compareTo The value compare to current\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(compareTo) \r\n\t{\r\n\t\tif(compareTo instanceof DistinguishedName) \r\n\t\t{\r\n\t\t\tif(this.relativeDistinguishedNames.length !== compareTo.relativeDistinguishedNames.length)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\tfor(const [index, relativeDistinguishedName] of this.relativeDistinguishedNames.entries()) \r\n\t\t\t{\r\n\t\t\t\tif(relativeDistinguishedName.isEqual(compareTo.relativeDistinguishedNames[index]) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(compareTo instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.valueBeforeDecode, compareTo);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert a Distinguished Name to a human-readable string\r\n\t * based on RFC4514\r\n\t */\r\n\ttoString() \r\n\t{\r\n\t\treturn this.relativeDistinguishedNames.map(rdn => rdn.toString()).join(\",\");\r\n\t}\r\n\t//**********************************************************************************\r\n\r\n\t/**\r\n\t * @type {RelativeDistinguishedNames}\r\n\t * @deprecated\r\n\t */\r\n\tget typesAndValues() \r\n\t{\r\n\t\tif(this.relativeDistinguishedNames.length === 0) \r\n\t\t{\r\n\t\t\tthis.relativeDistinguishedNames.push(new RelativeDistinguishedNames());\r\n\t\t}\r\n\t\treturn this.relativeDistinguishedNames[0];\r\n\t}\r\n\r\n\t/**\r\n\t * @type {RelativeDistinguishedNames}\r\n\t * @deprecated\r\n\t */\r\n\tset typesAndValues(value) \r\n\t{\r\n\t\tif(this.relativeDistinguishedNames.length === 0) \r\n\t\t{\r\n\t\t\tthis.relativeDistinguishedNames.push(new RelativeDistinguishedNames());\r\n\t\t}\r\n\t\tthis.relativeDistinguishedNames[0] = value;\r\n\t}\r\n}\r\n//**************************************************************************************\r\n"],"file":"DistinguishedName.js"}